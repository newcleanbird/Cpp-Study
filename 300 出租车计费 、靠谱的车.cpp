/*
题目描述：
程序员小明打了一辆出租车去上班。出于职业敏感，他注意到这辆出租车的计费表有点问题，总是偏大。
出租车司机解释说他不喜欢数字4，所以改装了计费表，任何数字位置遇到数字4就直接跳过，其余功能都正常。
比如：
1.     23再多一块钱就变为25；

2.     39再多一块钱变为50；

3.     399再多一块钱变为500；
小明识破了司机的伎俩，准备利用自己的学识打败司机的阴谋。
给出计费表的表面读数，返回实际产生的费用。

输入描述：
只有一行，数字N，表示里程表的读数。
(1<=N<=888888888)。
输出描述：
一个数字，表示实际产生的费用。以回车结束。

示例1
输入：
5
输出：
4
说明：
5表示计费表的表面读数。
4表示实际产生的费用其实只有4块钱。

示例2
输入：
17
输出：
15
说明：
17表示计费表的表面读数。
15表示实际产生的费用其实只有15块钱。

示例3
输入：
100
输出：
81
说明：
100表示计费表的表面读数。
81表示实际产生的费用其实只有81块钱。
*/
#include<iostream>
#include<vector>

using namespace std;

int calculateActualCost(int N) {
	int actualCost = 0; // 实际的数
	int placeValue = 1; // 表示当前处理的位数的权重，个位开始

	while (N > 0) {
		int digit = N % 10; // 获取当前最低位的数字
		N /= 10; // 移除当前处理的最低位，重新给N赋值
		// 如果数字大于等于4，实际数字应该减1（因为跳过了4）
		if (digit > 4) {
			digit -= 1;
		}
		actualCost += digit * placeValue;// 累加当前位的实际贡献
		placeValue *= 9;
		// 更新权重，因为每一位实际上只有9种可能（0-3, 5-9）
		// 如：9*1 ,9*10就是它的实际的值。
	}
	return actualCost;
}


int main()
{
	int n;
	cin >> n;
	vector<int> vec;
	cout << calculateActualCost(n);

}